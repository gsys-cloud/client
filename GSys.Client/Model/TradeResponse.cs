/*
 * api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GSys.Client.Client.OpenAPIDateConverter;

namespace GSys.Client.Model
{
    /// <summary>
    /// TradeResponse
    /// </summary>
    [DataContract(Name = "TradeResponse")]
    public partial class TradeResponse : IEquatable<TradeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradeResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeResponse" /> class.
        /// </summary>
        /// <param name="storeA">storeA (required).</param>
        /// <param name="storeB">storeB (required).</param>
        public TradeResponse(TradeResponseStore storeA = default(TradeResponseStore), TradeResponseStore storeB = default(TradeResponseStore))
        {
            // to ensure "storeA" is required (not null)
            if (storeA == null)
            {
                throw new ArgumentNullException("storeA is a required property for TradeResponse and cannot be null");
            }
            this.StoreA = storeA;
            // to ensure "storeB" is required (not null)
            if (storeB == null)
            {
                throw new ArgumentNullException("storeB is a required property for TradeResponse and cannot be null");
            }
            this.StoreB = storeB;
        }

        /// <summary>
        /// Gets or Sets StoreA
        /// </summary>
        [DataMember(Name = "storeA", IsRequired = true, EmitDefaultValue = true)]
        public TradeResponseStore StoreA { get; set; }

        /// <summary>
        /// Gets or Sets StoreB
        /// </summary>
        [DataMember(Name = "storeB", IsRequired = true, EmitDefaultValue = true)]
        public TradeResponseStore StoreB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradeResponse {\n");
            sb.Append("  StoreA: ").Append(StoreA).Append("\n");
            sb.Append("  StoreB: ").Append(StoreB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeResponse);
        }

        /// <summary>
        /// Returns true if TradeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StoreA == input.StoreA ||
                    (this.StoreA != null &&
                    this.StoreA.Equals(input.StoreA))
                ) && 
                (
                    this.StoreB == input.StoreB ||
                    (this.StoreB != null &&
                    this.StoreB.Equals(input.StoreB))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreA != null)
                {
                    hashCode = (hashCode * 59) + this.StoreA.GetHashCode();
                }
                if (this.StoreB != null)
                {
                    hashCode = (hashCode * 59) + this.StoreB.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
