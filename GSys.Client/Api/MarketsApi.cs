/*
 * api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GSys.Client.Client;
using GSys.Client.Model;

namespace GSys.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMarketItemResponse</returns>
        CreateMarketItemResponse CreateMarketItem(string idempotencyKey, string market, string item, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMarketItemResponse</returns>
        ApiResponse<CreateMarketItemResponse> CreateMarketItemWithHttpInfo(string idempotencyKey, string market, string item, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="deleteMarketItemRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteMarketItem(string idempotencyKey, string market, string item, DeleteMarketItemRequest deleteMarketItemRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="deleteMarketItemRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteMarketItemWithHttpInfo(string idempotencyKey, string market, string item, DeleteMarketItemRequest deleteMarketItemRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMarketItemResponse</returns>
        GetMarketItemResponse GetMarketItem(string idempotencyKey, string market, string item, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMarketItemResponse</returns>
        ApiResponse<GetMarketItemResponse> GetMarketItemWithHttpInfo(string idempotencyKey, string market, string item, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MarketEventDelete(string idempotencyKey, Object body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MarketEventDeleteWithHttpInfo(string idempotencyKey, Object body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MarketEventReceive(string idempotencyKey, Object body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MarketEventReceiveWithHttpInfo(string idempotencyKey, Object body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="buyOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MarketItemBuyOrder(string idempotencyKey, string market, string item, BuyOrderRequest buyOrderRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="buyOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MarketItemBuyOrderWithHttpInfo(string idempotencyKey, string market, string item, BuyOrderRequest buyOrderRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMarketItemResponse</returns>
        System.Threading.Tasks.Task<CreateMarketItemResponse> CreateMarketItemAsync(string idempotencyKey, string market, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMarketItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMarketItemResponse>> CreateMarketItemWithHttpInfoAsync(string idempotencyKey, string market, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="deleteMarketItemRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteMarketItemAsync(string idempotencyKey, string market, string item, DeleteMarketItemRequest deleteMarketItemRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="deleteMarketItemRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMarketItemWithHttpInfoAsync(string idempotencyKey, string market, string item, DeleteMarketItemRequest deleteMarketItemRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMarketItemResponse</returns>
        System.Threading.Tasks.Task<GetMarketItemResponse> GetMarketItemAsync(string idempotencyKey, string market, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMarketItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMarketItemResponse>> GetMarketItemWithHttpInfoAsync(string idempotencyKey, string market, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MarketEventDeleteAsync(string idempotencyKey, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarketEventDeleteWithHttpInfoAsync(string idempotencyKey, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MarketEventReceiveAsync(string idempotencyKey, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarketEventReceiveWithHttpInfoAsync(string idempotencyKey, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="buyOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MarketItemBuyOrderAsync(string idempotencyKey, string market, string item, BuyOrderRequest buyOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="buyOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarketItemBuyOrderWithHttpInfoAsync(string idempotencyKey, string market, string item, BuyOrderRequest buyOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketsApi : IMarketsApiSync, IMarketsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketsApi : IMarketsApi
    {
        private GSys.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketsApi(string basePath)
        {
            this.Configuration = GSys.Client.Client.Configuration.MergeConfigurations(
                GSys.Client.Client.GlobalConfiguration.Instance,
                new GSys.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GSys.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GSys.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GSys.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketsApi(GSys.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GSys.Client.Client.Configuration.MergeConfigurations(
                GSys.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GSys.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GSys.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GSys.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarketsApi(GSys.Client.Client.ISynchronousClient client, GSys.Client.Client.IAsynchronousClient asyncClient, GSys.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GSys.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GSys.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GSys.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GSys.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GSys.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMarketItemResponse</returns>
        public CreateMarketItemResponse CreateMarketItem(string idempotencyKey, string market, string item, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<CreateMarketItemResponse> localVarResponse = CreateMarketItemWithHttpInfo(idempotencyKey, market, item);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMarketItemResponse</returns>
        public GSys.Client.Client.ApiResponse<CreateMarketItemResponse> CreateMarketItemWithHttpInfo(string idempotencyKey, string market, string item, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->CreateMarketItem");
            }

            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketsApi->CreateMarketItem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'item' when calling MarketsApi->CreateMarketItem");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("market", GSys.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("item", GSys.Client.Client.ClientUtils.ParameterToString(item)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter

            localVarRequestOptions.Operation = "MarketsApi.CreateMarketItem";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMarketItemResponse>("/api/market/{market}/items/{item}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMarketItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMarketItemResponse</returns>
        public async System.Threading.Tasks.Task<CreateMarketItemResponse> CreateMarketItemAsync(string idempotencyKey, string market, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<CreateMarketItemResponse> localVarResponse = await CreateMarketItemWithHttpInfoAsync(idempotencyKey, market, item, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMarketItemResponse)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<CreateMarketItemResponse>> CreateMarketItemWithHttpInfoAsync(string idempotencyKey, string market, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->CreateMarketItem");
            }

            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketsApi->CreateMarketItem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'item' when calling MarketsApi->CreateMarketItem");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("market", GSys.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("item", GSys.Client.Client.ClientUtils.ParameterToString(item)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter

            localVarRequestOptions.Operation = "MarketsApi.CreateMarketItem";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateMarketItemResponse>("/api/market/{market}/items/{item}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMarketItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="deleteMarketItemRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteMarketItem(string idempotencyKey, string market, string item, DeleteMarketItemRequest deleteMarketItemRequest, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = DeleteMarketItemWithHttpInfo(idempotencyKey, market, item, deleteMarketItemRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="deleteMarketItemRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public GSys.Client.Client.ApiResponse<Object> DeleteMarketItemWithHttpInfo(string idempotencyKey, string market, string item, DeleteMarketItemRequest deleteMarketItemRequest, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->DeleteMarketItem");
            }

            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketsApi->DeleteMarketItem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'item' when calling MarketsApi->DeleteMarketItem");
            }

            // verify the required parameter 'deleteMarketItemRequest' is set
            if (deleteMarketItemRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'deleteMarketItemRequest' when calling MarketsApi->DeleteMarketItem");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("market", GSys.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("item", GSys.Client.Client.ClientUtils.ParameterToString(item)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = deleteMarketItemRequest;

            localVarRequestOptions.Operation = "MarketsApi.DeleteMarketItem";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/market/{market}/items/{item}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMarketItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="deleteMarketItemRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteMarketItemAsync(string idempotencyKey, string market, string item, DeleteMarketItemRequest deleteMarketItemRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = await DeleteMarketItemWithHttpInfoAsync(idempotencyKey, market, item, deleteMarketItemRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="deleteMarketItemRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<Object>> DeleteMarketItemWithHttpInfoAsync(string idempotencyKey, string market, string item, DeleteMarketItemRequest deleteMarketItemRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->DeleteMarketItem");
            }

            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketsApi->DeleteMarketItem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'item' when calling MarketsApi->DeleteMarketItem");
            }

            // verify the required parameter 'deleteMarketItemRequest' is set
            if (deleteMarketItemRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'deleteMarketItemRequest' when calling MarketsApi->DeleteMarketItem");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("market", GSys.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("item", GSys.Client.Client.ClientUtils.ParameterToString(item)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = deleteMarketItemRequest;

            localVarRequestOptions.Operation = "MarketsApi.DeleteMarketItem";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/market/{market}/items/{item}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMarketItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMarketItemResponse</returns>
        public GetMarketItemResponse GetMarketItem(string idempotencyKey, string market, string item, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<GetMarketItemResponse> localVarResponse = GetMarketItemWithHttpInfo(idempotencyKey, market, item);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMarketItemResponse</returns>
        public GSys.Client.Client.ApiResponse<GetMarketItemResponse> GetMarketItemWithHttpInfo(string idempotencyKey, string market, string item, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->GetMarketItem");
            }

            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketsApi->GetMarketItem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'item' when calling MarketsApi->GetMarketItem");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("market", GSys.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("item", GSys.Client.Client.ClientUtils.ParameterToString(item)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter

            localVarRequestOptions.Operation = "MarketsApi.GetMarketItem";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMarketItemResponse>("/api/market/{market}/items/{item}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMarketItemResponse</returns>
        public async System.Threading.Tasks.Task<GetMarketItemResponse> GetMarketItemAsync(string idempotencyKey, string market, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<GetMarketItemResponse> localVarResponse = await GetMarketItemWithHttpInfoAsync(idempotencyKey, market, item, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMarketItemResponse)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<GetMarketItemResponse>> GetMarketItemWithHttpInfoAsync(string idempotencyKey, string market, string item, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->GetMarketItem");
            }

            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketsApi->GetMarketItem");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'item' when calling MarketsApi->GetMarketItem");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("market", GSys.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("item", GSys.Client.Client.ClientUtils.ParameterToString(item)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter

            localVarRequestOptions.Operation = "MarketsApi.GetMarketItem";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMarketItemResponse>("/api/market/{market}/items/{item}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MarketEventDelete(string idempotencyKey, Object body, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = MarketEventDeleteWithHttpInfo(idempotencyKey, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public GSys.Client.Client.ApiResponse<Object> MarketEventDeleteWithHttpInfo(string idempotencyKey, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->MarketEventDelete");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'body' when calling MarketsApi->MarketEventDelete");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MarketsApi.MarketEventDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/markets/events/ops/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketEventDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MarketEventDeleteAsync(string idempotencyKey, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = await MarketEventDeleteWithHttpInfoAsync(idempotencyKey, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<Object>> MarketEventDeleteWithHttpInfoAsync(string idempotencyKey, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->MarketEventDelete");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'body' when calling MarketsApi->MarketEventDelete");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MarketsApi.MarketEventDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/markets/events/ops/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketEventDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MarketEventReceive(string idempotencyKey, Object body, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = MarketEventReceiveWithHttpInfo(idempotencyKey, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public GSys.Client.Client.ApiResponse<Object> MarketEventReceiveWithHttpInfo(string idempotencyKey, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->MarketEventReceive");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'body' when calling MarketsApi->MarketEventReceive");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MarketsApi.MarketEventReceive";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/markets/events/ops/receive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketEventReceive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MarketEventReceiveAsync(string idempotencyKey, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = await MarketEventReceiveWithHttpInfoAsync(idempotencyKey, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<Object>> MarketEventReceiveWithHttpInfoAsync(string idempotencyKey, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->MarketEventReceive");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'body' when calling MarketsApi->MarketEventReceive");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MarketsApi.MarketEventReceive";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/markets/events/ops/receive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketEventReceive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="buyOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MarketItemBuyOrder(string idempotencyKey, string market, string item, BuyOrderRequest buyOrderRequest, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = MarketItemBuyOrderWithHttpInfo(idempotencyKey, market, item, buyOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="buyOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public GSys.Client.Client.ApiResponse<Object> MarketItemBuyOrderWithHttpInfo(string idempotencyKey, string market, string item, BuyOrderRequest buyOrderRequest, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->MarketItemBuyOrder");
            }

            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketsApi->MarketItemBuyOrder");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'item' when calling MarketsApi->MarketItemBuyOrder");
            }

            // verify the required parameter 'buyOrderRequest' is set
            if (buyOrderRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'buyOrderRequest' when calling MarketsApi->MarketItemBuyOrder");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("market", GSys.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("item", GSys.Client.Client.ClientUtils.ParameterToString(item)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = buyOrderRequest;

            localVarRequestOptions.Operation = "MarketsApi.MarketItemBuyOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/markets/{market}/items/{item}/ops/buy_order", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketItemBuyOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="buyOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MarketItemBuyOrderAsync(string idempotencyKey, string market, string item, BuyOrderRequest buyOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = await MarketItemBuyOrderWithHttpInfoAsync(idempotencyKey, market, item, buyOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="market"></param>
        /// <param name="item"></param>
        /// <param name="buyOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<Object>> MarketItemBuyOrderWithHttpInfoAsync(string idempotencyKey, string market, string item, BuyOrderRequest buyOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling MarketsApi->MarketItemBuyOrder");
            }

            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketsApi->MarketItemBuyOrder");
            }

            // verify the required parameter 'item' is set
            if (item == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'item' when calling MarketsApi->MarketItemBuyOrder");
            }

            // verify the required parameter 'buyOrderRequest' is set
            if (buyOrderRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'buyOrderRequest' when calling MarketsApi->MarketItemBuyOrder");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("market", GSys.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("item", GSys.Client.Client.ClientUtils.ParameterToString(item)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = buyOrderRequest;

            localVarRequestOptions.Operation = "MarketsApi.MarketItemBuyOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/markets/{market}/items/{item}/ops/buy_order", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketItemBuyOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
