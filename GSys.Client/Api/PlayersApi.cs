/*
 * api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GSys.Client.Client;
using GSys.Client.Model;

namespace GSys.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="createPlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePlayerStoreResponse</returns>
        CreatePlayerStoreResponse CreatePlayerStore(string idempotencyKey, string player, string store, CreatePlayerStoreRequest createPlayerStoreRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="createPlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePlayerStoreResponse</returns>
        ApiResponse<CreatePlayerStoreResponse> CreatePlayerStoreWithHttpInfo(string idempotencyKey, string player, string store, CreatePlayerStoreRequest createPlayerStoreRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="deletePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeletePlayerStore(string idempotencyKey, string player, string store, DeletePlayerStoreRequest deletePlayerStoreRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="deletePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeletePlayerStoreWithHttpInfo(string idempotencyKey, string player, string store, DeletePlayerStoreRequest deletePlayerStoreRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPlayerStoreResponse</returns>
        GetPlayerStoreResponse GetPlayerStore(string idempotencyKey, string player, string store, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPlayerStoreResponse</returns>
        ApiResponse<GetPlayerStoreResponse> GetPlayerStoreWithHttpInfo(string idempotencyKey, string player, string store, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="tradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TradeResponse</returns>
        TradeResponse PlayersTrade(string idempotencyKey, TradeRequest tradeRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="tradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TradeResponse</returns>
        ApiResponse<TradeResponse> PlayersTradeWithHttpInfo(string idempotencyKey, TradeRequest tradeRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="updatePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePlayerStoreResponse</returns>
        UpdatePlayerStoreResponse UpdatePlayerStore(string idempotencyKey, string player, string store, UpdatePlayerStoreRequest updatePlayerStoreRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="updatePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePlayerStoreResponse</returns>
        ApiResponse<UpdatePlayerStoreResponse> UpdatePlayerStoreWithHttpInfo(string idempotencyKey, string player, string store, UpdatePlayerStoreRequest updatePlayerStoreRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="updatePlayerStoresRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePlayerStoresResponse</returns>
        UpdatePlayerStoresResponse UpdatePlayerStores(string idempotencyKey, string player, UpdatePlayerStoresRequest updatePlayerStoresRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="updatePlayerStoresRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePlayerStoresResponse</returns>
        ApiResponse<UpdatePlayerStoresResponse> UpdatePlayerStoresWithHttpInfo(string idempotencyKey, string player, UpdatePlayerStoresRequest updatePlayerStoresRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="createPlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePlayerStoreResponse</returns>
        System.Threading.Tasks.Task<CreatePlayerStoreResponse> CreatePlayerStoreAsync(string idempotencyKey, string player, string store, CreatePlayerStoreRequest createPlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="createPlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePlayerStoreResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePlayerStoreResponse>> CreatePlayerStoreWithHttpInfoAsync(string idempotencyKey, string player, string store, CreatePlayerStoreRequest createPlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="deletePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeletePlayerStoreAsync(string idempotencyKey, string player, string store, DeletePlayerStoreRequest deletePlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="deletePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePlayerStoreWithHttpInfoAsync(string idempotencyKey, string player, string store, DeletePlayerStoreRequest deletePlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPlayerStoreResponse</returns>
        System.Threading.Tasks.Task<GetPlayerStoreResponse> GetPlayerStoreAsync(string idempotencyKey, string player, string store, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPlayerStoreResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPlayerStoreResponse>> GetPlayerStoreWithHttpInfoAsync(string idempotencyKey, string player, string store, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="tradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TradeResponse</returns>
        System.Threading.Tasks.Task<TradeResponse> PlayersTradeAsync(string idempotencyKey, TradeRequest tradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="tradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeResponse>> PlayersTradeWithHttpInfoAsync(string idempotencyKey, TradeRequest tradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="updatePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePlayerStoreResponse</returns>
        System.Threading.Tasks.Task<UpdatePlayerStoreResponse> UpdatePlayerStoreAsync(string idempotencyKey, string player, string store, UpdatePlayerStoreRequest updatePlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="updatePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePlayerStoreResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePlayerStoreResponse>> UpdatePlayerStoreWithHttpInfoAsync(string idempotencyKey, string player, string store, UpdatePlayerStoreRequest updatePlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="updatePlayerStoresRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePlayerStoresResponse</returns>
        System.Threading.Tasks.Task<UpdatePlayerStoresResponse> UpdatePlayerStoresAsync(string idempotencyKey, string player, UpdatePlayerStoresRequest updatePlayerStoresRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="updatePlayerStoresRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePlayerStoresResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePlayerStoresResponse>> UpdatePlayerStoresWithHttpInfoAsync(string idempotencyKey, string player, UpdatePlayerStoresRequest updatePlayerStoresRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApi : IPlayersApiSync, IPlayersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayersApi : IPlayersApi
    {
        private GSys.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi(string basePath)
        {
            this.Configuration = GSys.Client.Client.Configuration.MergeConfigurations(
                GSys.Client.Client.GlobalConfiguration.Instance,
                new GSys.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GSys.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GSys.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GSys.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayersApi(GSys.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GSys.Client.Client.Configuration.MergeConfigurations(
                GSys.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GSys.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GSys.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GSys.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlayersApi(GSys.Client.Client.ISynchronousClient client, GSys.Client.Client.IAsynchronousClient asyncClient, GSys.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GSys.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GSys.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GSys.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GSys.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GSys.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="createPlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePlayerStoreResponse</returns>
        public CreatePlayerStoreResponse CreatePlayerStore(string idempotencyKey, string player, string store, CreatePlayerStoreRequest createPlayerStoreRequest, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<CreatePlayerStoreResponse> localVarResponse = CreatePlayerStoreWithHttpInfo(idempotencyKey, player, store, createPlayerStoreRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="createPlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePlayerStoreResponse</returns>
        public GSys.Client.Client.ApiResponse<CreatePlayerStoreResponse> CreatePlayerStoreWithHttpInfo(string idempotencyKey, string player, string store, CreatePlayerStoreRequest createPlayerStoreRequest, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->CreatePlayerStore");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->CreatePlayerStore");
            }

            // verify the required parameter 'store' is set
            if (store == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'store' when calling PlayersApi->CreatePlayerStore");
            }

            // verify the required parameter 'createPlayerStoreRequest' is set
            if (createPlayerStoreRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'createPlayerStoreRequest' when calling PlayersApi->CreatePlayerStore");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.PathParameters.Add("store", GSys.Client.Client.ClientUtils.ParameterToString(store)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = createPlayerStoreRequest;

            localVarRequestOptions.Operation = "PlayersApi.CreatePlayerStore";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePlayerStoreResponse>("/api/players/{player}/stores/{store}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlayerStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="createPlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePlayerStoreResponse</returns>
        public async System.Threading.Tasks.Task<CreatePlayerStoreResponse> CreatePlayerStoreAsync(string idempotencyKey, string player, string store, CreatePlayerStoreRequest createPlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<CreatePlayerStoreResponse> localVarResponse = await CreatePlayerStoreWithHttpInfoAsync(idempotencyKey, player, store, createPlayerStoreRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="createPlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePlayerStoreResponse)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<CreatePlayerStoreResponse>> CreatePlayerStoreWithHttpInfoAsync(string idempotencyKey, string player, string store, CreatePlayerStoreRequest createPlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->CreatePlayerStore");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->CreatePlayerStore");
            }

            // verify the required parameter 'store' is set
            if (store == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'store' when calling PlayersApi->CreatePlayerStore");
            }

            // verify the required parameter 'createPlayerStoreRequest' is set
            if (createPlayerStoreRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'createPlayerStoreRequest' when calling PlayersApi->CreatePlayerStore");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.PathParameters.Add("store", GSys.Client.Client.ClientUtils.ParameterToString(store)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = createPlayerStoreRequest;

            localVarRequestOptions.Operation = "PlayersApi.CreatePlayerStore";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePlayerStoreResponse>("/api/players/{player}/stores/{store}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlayerStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="deletePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeletePlayerStore(string idempotencyKey, string player, string store, DeletePlayerStoreRequest deletePlayerStoreRequest, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = DeletePlayerStoreWithHttpInfo(idempotencyKey, player, store, deletePlayerStoreRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="deletePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public GSys.Client.Client.ApiResponse<Object> DeletePlayerStoreWithHttpInfo(string idempotencyKey, string player, string store, DeletePlayerStoreRequest deletePlayerStoreRequest, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->DeletePlayerStore");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->DeletePlayerStore");
            }

            // verify the required parameter 'store' is set
            if (store == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'store' when calling PlayersApi->DeletePlayerStore");
            }

            // verify the required parameter 'deletePlayerStoreRequest' is set
            if (deletePlayerStoreRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'deletePlayerStoreRequest' when calling PlayersApi->DeletePlayerStore");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.PathParameters.Add("store", GSys.Client.Client.ClientUtils.ParameterToString(store)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = deletePlayerStoreRequest;

            localVarRequestOptions.Operation = "PlayersApi.DeletePlayerStore";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/players/{player}/stores/{store}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlayerStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="deletePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeletePlayerStoreAsync(string idempotencyKey, string player, string store, DeletePlayerStoreRequest deletePlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<Object> localVarResponse = await DeletePlayerStoreWithHttpInfoAsync(idempotencyKey, player, store, deletePlayerStoreRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="deletePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<Object>> DeletePlayerStoreWithHttpInfoAsync(string idempotencyKey, string player, string store, DeletePlayerStoreRequest deletePlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->DeletePlayerStore");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->DeletePlayerStore");
            }

            // verify the required parameter 'store' is set
            if (store == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'store' when calling PlayersApi->DeletePlayerStore");
            }

            // verify the required parameter 'deletePlayerStoreRequest' is set
            if (deletePlayerStoreRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'deletePlayerStoreRequest' when calling PlayersApi->DeletePlayerStore");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.PathParameters.Add("store", GSys.Client.Client.ClientUtils.ParameterToString(store)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = deletePlayerStoreRequest;

            localVarRequestOptions.Operation = "PlayersApi.DeletePlayerStore";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/players/{player}/stores/{store}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlayerStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPlayerStoreResponse</returns>
        public GetPlayerStoreResponse GetPlayerStore(string idempotencyKey, string player, string store, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<GetPlayerStoreResponse> localVarResponse = GetPlayerStoreWithHttpInfo(idempotencyKey, player, store);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPlayerStoreResponse</returns>
        public GSys.Client.Client.ApiResponse<GetPlayerStoreResponse> GetPlayerStoreWithHttpInfo(string idempotencyKey, string player, string store, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->GetPlayerStore");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->GetPlayerStore");
            }

            // verify the required parameter 'store' is set
            if (store == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'store' when calling PlayersApi->GetPlayerStore");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.PathParameters.Add("store", GSys.Client.Client.ClientUtils.ParameterToString(store)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter

            localVarRequestOptions.Operation = "PlayersApi.GetPlayerStore";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPlayerStoreResponse>("/api/players/{player}/stores/{store}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPlayerStoreResponse</returns>
        public async System.Threading.Tasks.Task<GetPlayerStoreResponse> GetPlayerStoreAsync(string idempotencyKey, string player, string store, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<GetPlayerStoreResponse> localVarResponse = await GetPlayerStoreWithHttpInfoAsync(idempotencyKey, player, store, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPlayerStoreResponse)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<GetPlayerStoreResponse>> GetPlayerStoreWithHttpInfoAsync(string idempotencyKey, string player, string store, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->GetPlayerStore");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->GetPlayerStore");
            }

            // verify the required parameter 'store' is set
            if (store == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'store' when calling PlayersApi->GetPlayerStore");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.PathParameters.Add("store", GSys.Client.Client.ClientUtils.ParameterToString(store)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter

            localVarRequestOptions.Operation = "PlayersApi.GetPlayerStore";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPlayerStoreResponse>("/api/players/{player}/stores/{store}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="tradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TradeResponse</returns>
        public TradeResponse PlayersTrade(string idempotencyKey, TradeRequest tradeRequest, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<TradeResponse> localVarResponse = PlayersTradeWithHttpInfo(idempotencyKey, tradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="tradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TradeResponse</returns>
        public GSys.Client.Client.ApiResponse<TradeResponse> PlayersTradeWithHttpInfo(string idempotencyKey, TradeRequest tradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->PlayersTrade");
            }

            // verify the required parameter 'tradeRequest' is set
            if (tradeRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'tradeRequest' when calling PlayersApi->PlayersTrade");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = tradeRequest;

            localVarRequestOptions.Operation = "PlayersApi.PlayersTrade";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TradeResponse>("/api/players/ops/trade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="tradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TradeResponse</returns>
        public async System.Threading.Tasks.Task<TradeResponse> PlayersTradeAsync(string idempotencyKey, TradeRequest tradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<TradeResponse> localVarResponse = await PlayersTradeWithHttpInfoAsync(idempotencyKey, tradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="tradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TradeResponse)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<TradeResponse>> PlayersTradeWithHttpInfoAsync(string idempotencyKey, TradeRequest tradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->PlayersTrade");
            }

            // verify the required parameter 'tradeRequest' is set
            if (tradeRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'tradeRequest' when calling PlayersApi->PlayersTrade");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = tradeRequest;

            localVarRequestOptions.Operation = "PlayersApi.PlayersTrade";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TradeResponse>("/api/players/ops/trade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="updatePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePlayerStoreResponse</returns>
        public UpdatePlayerStoreResponse UpdatePlayerStore(string idempotencyKey, string player, string store, UpdatePlayerStoreRequest updatePlayerStoreRequest, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<UpdatePlayerStoreResponse> localVarResponse = UpdatePlayerStoreWithHttpInfo(idempotencyKey, player, store, updatePlayerStoreRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="updatePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePlayerStoreResponse</returns>
        public GSys.Client.Client.ApiResponse<UpdatePlayerStoreResponse> UpdatePlayerStoreWithHttpInfo(string idempotencyKey, string player, string store, UpdatePlayerStoreRequest updatePlayerStoreRequest, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->UpdatePlayerStore");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->UpdatePlayerStore");
            }

            // verify the required parameter 'store' is set
            if (store == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'store' when calling PlayersApi->UpdatePlayerStore");
            }

            // verify the required parameter 'updatePlayerStoreRequest' is set
            if (updatePlayerStoreRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'updatePlayerStoreRequest' when calling PlayersApi->UpdatePlayerStore");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.PathParameters.Add("store", GSys.Client.Client.ClientUtils.ParameterToString(store)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = updatePlayerStoreRequest;

            localVarRequestOptions.Operation = "PlayersApi.UpdatePlayerStore";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdatePlayerStoreResponse>("/api/players/{player}/stores/{store}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayerStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="updatePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePlayerStoreResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePlayerStoreResponse> UpdatePlayerStoreAsync(string idempotencyKey, string player, string store, UpdatePlayerStoreRequest updatePlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<UpdatePlayerStoreResponse> localVarResponse = await UpdatePlayerStoreWithHttpInfoAsync(idempotencyKey, player, store, updatePlayerStoreRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="store"></param>
        /// <param name="updatePlayerStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePlayerStoreResponse)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<UpdatePlayerStoreResponse>> UpdatePlayerStoreWithHttpInfoAsync(string idempotencyKey, string player, string store, UpdatePlayerStoreRequest updatePlayerStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->UpdatePlayerStore");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->UpdatePlayerStore");
            }

            // verify the required parameter 'store' is set
            if (store == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'store' when calling PlayersApi->UpdatePlayerStore");
            }

            // verify the required parameter 'updatePlayerStoreRequest' is set
            if (updatePlayerStoreRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'updatePlayerStoreRequest' when calling PlayersApi->UpdatePlayerStore");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.PathParameters.Add("store", GSys.Client.Client.ClientUtils.ParameterToString(store)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = updatePlayerStoreRequest;

            localVarRequestOptions.Operation = "PlayersApi.UpdatePlayerStore";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatePlayerStoreResponse>("/api/players/{player}/stores/{store}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayerStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="updatePlayerStoresRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePlayerStoresResponse</returns>
        public UpdatePlayerStoresResponse UpdatePlayerStores(string idempotencyKey, string player, UpdatePlayerStoresRequest updatePlayerStoresRequest, int operationIndex = 0)
        {
            GSys.Client.Client.ApiResponse<UpdatePlayerStoresResponse> localVarResponse = UpdatePlayerStoresWithHttpInfo(idempotencyKey, player, updatePlayerStoresRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="updatePlayerStoresRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePlayerStoresResponse</returns>
        public GSys.Client.Client.ApiResponse<UpdatePlayerStoresResponse> UpdatePlayerStoresWithHttpInfo(string idempotencyKey, string player, UpdatePlayerStoresRequest updatePlayerStoresRequest, int operationIndex = 0)
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->UpdatePlayerStores");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->UpdatePlayerStores");
            }

            // verify the required parameter 'updatePlayerStoresRequest' is set
            if (updatePlayerStoresRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'updatePlayerStoresRequest' when calling PlayersApi->UpdatePlayerStores");
            }

            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = updatePlayerStoresRequest;

            localVarRequestOptions.Operation = "PlayersApi.UpdatePlayerStores";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdatePlayerStoresResponse>("/api/players/{player}/stores", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayerStores", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="updatePlayerStoresRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePlayerStoresResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePlayerStoresResponse> UpdatePlayerStoresAsync(string idempotencyKey, string player, UpdatePlayerStoresRequest updatePlayerStoresRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GSys.Client.Client.ApiResponse<UpdatePlayerStoresResponse> localVarResponse = await UpdatePlayerStoresWithHttpInfoAsync(idempotencyKey, player, updatePlayerStoresRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GSys.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idempotencyKey">The idempotency key.</param>
        /// <param name="player"></param>
        /// <param name="updatePlayerStoresRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePlayerStoresResponse)</returns>
        public async System.Threading.Tasks.Task<GSys.Client.Client.ApiResponse<UpdatePlayerStoresResponse>> UpdatePlayerStoresWithHttpInfoAsync(string idempotencyKey, string player, UpdatePlayerStoresRequest updatePlayerStoresRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idempotencyKey' is set
            if (idempotencyKey == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'idempotencyKey' when calling PlayersApi->UpdatePlayerStores");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'player' when calling PlayersApi->UpdatePlayerStores");
            }

            // verify the required parameter 'updatePlayerStoresRequest' is set
            if (updatePlayerStoresRequest == null)
            {
                throw new GSys.Client.Client.ApiException(400, "Missing required parameter 'updatePlayerStoresRequest' when calling PlayersApi->UpdatePlayerStores");
            }


            GSys.Client.Client.RequestOptions localVarRequestOptions = new GSys.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GSys.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GSys.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player", GSys.Client.Client.ClientUtils.ParameterToString(player)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("idempotency-key", GSys.Client.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            localVarRequestOptions.Data = updatePlayerStoresRequest;

            localVarRequestOptions.Operation = "PlayersApi.UpdatePlayerStores";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatePlayerStoresResponse>("/api/players/{player}/stores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayerStores", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
